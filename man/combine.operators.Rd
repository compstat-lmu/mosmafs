% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ecrshims.R
\name{combine.operators}
\alias{combine.operators}
\title{Combine ECR-Operators}
\usage{
combine.operators(param.set, ..., .binary.discrete.as.logical = TRUE)
}
\arguments{
\item{param.set}{\code{[ParamSet]} \code{\link[ParamHelpers:makeParamSet]{ParamSet}} that defines the search space.}

\item{...}{additional parameters. See description.}

\item{.binary.discrete.as.logical}{\code{[logical(1)]} whether to treat binary discrete parameters as \code{logical} parameters and
use bitwise operators.}
}
\value{
\code{\link[ecr:makeOperator]{ecr_operator}} ecr operator.
}
\description{
Combine operators to be applied to individuals that conform to parameter set \code{param.set}.
Parameters are the \code{param.set}, and the names / types of params with the operator to use.
Parameter groups that use a single operator can be defined using \code{.params.<groupname> = [character]}.

Say \code{param.set} has three logical params 'l1', 'l2', 'l3' and two numeric params 'n1', 'n2'.
To use operatorA for 'l1' and 'l2', operatorB for 'l3', and operatorC for all numeric
params, call
\code{combineOperator(param.set, .params.group1 = c("l1", "l2"), group1 = operatorA, l3 = operatorB, numeric = operatorC)}.

Use arguments by types, names of parameters, or group name. Valid types are 'numeric', 'logical', 'integer', 'discrete'.
Operators given for groups or individual parameters supercede operators given for types.

Strategy parameters can be created by using \code{.strategy.<groupname|parametername|type>}. They must be a \emph{function}
taking a named list of parameter values (i.e. an individuum) as input and return a named list of parameter values
to be given to the respective group's / parameter's or type's operator. If, in the example above, \code{operatorA} has
a parameter \code{sigma} that should also be treated as a parameter under evolution (and in fact be equal to \code{l3}), then
the above call would become
\code{combineOperator(param.set, .params.group1 = c("l1", "l2"), group1 = operatorA, .strategy.group1 = function(x) list(sigma = x$l3), l3 = operatorB, numeric = operatorC)}.

If .binary.discrete.as.logical is TRUE, then binary discrete params are handled as logical params.

Operators for logical parameters must have only one argument. Operators for discrete parameters
must have an additional argument 'values'. Operators for continuous or integer parameters must have
an additional argument 'lower', 'upper'.

Use the ecr::setup function to set parameters for operators ("currying").
}
\examples{
library("mlr")
library("rpart")

task.whole <- bh.task
rows.whole <- sample(nrow(getTaskData(task.whole)))
task <- subsetTask(task.whole, rows.whole[1:250])
task.hout <- subsetTask(task.whole, rows.whole[251])
lrn <- makeLearner("regr.rpart")

ps.simple <- mlrCPO::pSS(
  maxdepth: integer[1, 30],
  minsplit: integer[2, 30],
  cp: numeric[0.001, 0.999])
  nRes <- function(n) {
  makeResampleDesc("Subsample", split = 0.9, iters = n)
}

fitness.fun.mos <- makeObjective(lrn, task, ps.simple, nRes, 
  measure = mse, 
  holdout.data = task.hout, worst.measure = 100)

# extract param set from objective
ps.obj  <- getParamSet(fitness.fun.mos)
getParamIds(ps.obj) # automatically added parameter ' for selecting features
 
exp <- sampleValue(ps.obj)
res <- fitness.fun.mos(exp, fidelity = 2, holdout = FALSE)


}
